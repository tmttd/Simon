# .github/workflows/deploy.yml
name: Deploy to Vultr Server

on:
  push:
    branches: [ main ]        # 머지되면 항상 배포
  pull_request:
    branches: [ main ]        # PR에서도 배포를 “허용”하되 아래 if로 강하게 제어

concurrency:
  group: deploy-main
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  deploy:
    # PR일 때는 다음 조건을 모두 만족해야 실행:
    # 1) Draft 아님
    # 2) 포크 아님(= head.repo.full_name == base repo)
    # 3) 'deploy-ok' 라벨이 붙어 있음 (리뷰어가 승인 라벨을 달아야 함)
    if: >
      github.event_name == 'push' || (
        github.event_name == 'pull_request' &&
        !github.event.pull_request.draft &&
        github.event.pull_request.head.repo.full_name == github.repository &&
        contains(toJson(github.event.pull_request.labels), 'deploy-ok')
      )
    runs-on: ubuntu-latest
    timeout-minutes: 15

    # (선택) 환경 보호 규칙을 쓰면, 웹에서 Reviewer 승인이 있어야 진행됨
    # GitHub Settings > Environments > production 에서 Required reviewers 설정
    environment: production

    steps:
      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Add host key
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy to Server
        run: |
          ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            set -euo pipefail
            cd ~/app
            echo ">>> Pulling latest source code..."
            git fetch --all --prune
            git reset --hard origin/main
            git pull || true

            echo ">>> Rebuilding and restarting services..."
            docker compose up --build -d

            echo ">>> Pruning old docker images..."
            docker image prune -f

            echo ">>> Deployment successful!"
          EOF